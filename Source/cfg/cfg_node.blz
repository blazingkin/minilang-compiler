require ../instructions/register
require ../instructions/instruction
require ../instructions/arm_instruction
require ../minilang_compiler
import Set
node_counter = 1

printed_counters = []
printed_llvm_counters = []
printed_arm_counters = []

constructor CFGNode()

    predecessors = []
    label = (node_counter++)
    text_label = "LU" + label
    true_successor = {blz.nil}
    false_successor = {blz.nil}
    conditional_register = VirtualRegister("i1")
    printed = false
    exit_block = false

    # Milestone 3
    sealed = false
    variable_map = {}
    phis = []
    incomplete_phis = []

    successor = {blz.nil}
    instructions = []

    :set_instructions(to)
        instructions = to
    end

    :set_phis(to)
        phis = to
    end

    gen = Set()
    kill = Set()
    live_out = Set()

    :seal
        sealed = true
        for i = 0; i < incomplete_phis.length!(); i++
            phi_id = incomplete_phis[i].sources[0]
            phi_typ = incomplete_phis[i].typ
            phi_src = []
            for j = 0; j < predecessors.length!(); j++
                phi_src.add!(predecessors[j].find_variable(phi_id, phi_typ))
                phi_src.add!(predecessors[j])
            end
            incomplete_phis[i].sources = phi_src
            for j = 0; j < phi_src.length(); j++
                possibly_register = phi_src[j]
                if possibly_register.type == "VirtualRegister"
                    possibly_register.add_use(incomplete_phis[i])
                end
            end
            phis.add!(incomplete_phis[i])
        end
        incomplete_phis = []
    end

    printing_predecessors = false
    :print_predecessors(depth)
        if depth == {blz.nil}
            depth = 0
        end
        if printing_predecessors
            return ""
        end
        padding_char = ""
        for i = 0; i < depth; i++
            padding_char = padding_char + "\t"
        end
        printing_predecessors = true
        print(padding_char + this.show())
        for i = 0; i < predecessors.length!(); i++
            predecessors[i].print_predecessors(depth + 1)
        end
        printing_predecessors = false
    end

    :get_successors
        all_successors = []
        if true_successor != {blz.nil}
            all_successors.add!(true_successor)
        end
        if false_successor != {blz.nil}
            all_successors.add!(false_successor)
        end
        if successor != {blz.nil}
            all_successors.add!(successor)
        end
        all_successors
    end

    :write_variable(id, val)
        variable_map[id] = val
    end

    :find_variable(id, typ)
        if variable_map.has_key?(id)
            variable_map[id]
        else
            find_variable_from_predecessors(id, typ)
        end
    end

    :find_variable_from_predecessors(id, typ)
        if sealed.negate()
            phi_dest = VirtualRegister(typ)
            instr = Instruction("Phi", [id], [phi_dest], typ)
            incomplete_phis.add!(instr)
            val = phi_dest
        else if predecessors.length!() == 0
            throw "Uninitialized variable " + id
        else if predecessors.length!() == 1
            val = predecessors[0].find_variable(id, typ)
        else
            phi_dest = VirtualRegister(typ)
            phi_src = []
            write_variable(id, phi_dest)
            for i = 0; i < predecessors.length!(); i++
                phi_src.add!(predecessors[i].find_variable(id, typ))
                phi_src.add!(predecessors[i])
            end
            instr = Instruction("Phi", phi_src, [phi_dest], typ)
            phis.add!(instr)
            val = phi_dest
        end
        write_variable(id, val)
        return val
    end

    :show
        "Node " + text_label
    end

    :copy
        this
    end

    :is_conditional?
        true_successor != {blz.nil} || false_successor != {blz.nil}
    end

    :add_predecessor(node)
        # Only add it if it does not already exist
        if predecessors.contains?(node).negate()
            predecessors.add!(node)
        else
            predecessors
        end
    end

    :remove_predecessor(node)
        predecessors = predecessors.filter!(x -> x != node)
    end

    :set_true_successor(node)
        if true_successor != {blz.nil}
            true_successor.remove_predecessor(this)
        end
        if node != {blz.nil}
            node.add_predecessor(this)
        end
        true_successor = node
    end

    :set_false_successor(node)
        if false_successor != {blz.nil}
            false_successor.remove_predecessor(this)
        end
        if node != {blz.nil}
            node.add_predecessor(this)
        end
        false_successor = node
    end

    :set_successor(node)
        if successor != {blz.nil}
            successor.remove_predecessor(this)
        end
        if node != {blz.nil}
            node.add_predecessor(this)
        end
        successor = node
    end

    :add_instruction(instruction)
        instructions.add!(instruction)
    end

    :add_instruction_at_beginning(instruction)
        instructions = [instruction].append(this.instructions)
    end

    :emit_instructions
        if printed_counters.contains?(label)
            arr = []
            return arr
        end
        emit_instr = []
        printed_counters.add!(label)
        emit_instr.concatenate!(instructions)
        emit_instr
    end

    :make_branch
        if is_conditional?()
            instructions.add!(Instruction("Branch", [conditional_register], [true_successor.label, false_successor.label]))
        else if successor != {blz.nil}
            instructions.add!(Instruction("Branch", [], [successor.label]))
        end
    end

    :append_newlines(a, b)
        return a + "\n" + b
    end

    :emit_llvm
        if printed_llvm_counters.contains?(label)
            return ""
        end
        printed_llvm_counters.add!(label)
        instr = "\n" + text_label + ":"
        instr = instr + (phis.map!(x -> x.emit_llvm())).fold_left("", append_newlines)
        instr = instr + "\n" + (emit_instructions().map!(x -> x.emit_llvm()).fold_left("", append_newlines))
        if is_conditional?()
            instr = instr + "\n" + true_successor.emit_llvm()
            instr = instr + "\n" + false_successor.emit_llvm()
        else if successor != {blz.nil} && successor != this
            instr = instr + "\n" + successor.emit_llvm()
        end
        instr
    end

    :empty?
        instructions.size() == 1 && instructions[0].instruction_type == "Branch" && phis.empty?()
    end

    :resolve_phis_arm
        for i = 0; i < phis.length!(); i++
            temporary_for_phi = VirtualRegister()
            for j = 0; j < phis[i].sources.length(); j = j + 2
                val = phis[i].sources[j]
                pred_block = phis[i].sources[j + 1]
                if val == "null"
                    val = 0
                end
                pred_block.add_instruction(ARMInstruction("mov", [val], [temporary_for_phi]))
            end
            this.add_instruction_at_beginning(ARMInstruction("mov", [temporary_for_phi], [phis[i].destinations[0]]))

        end
    end

    :add_arm_instruction(instruction)
        arm_instruction_list.add!(instruction)
    end

    :add_arm_instruction_at_beginning(instruction)
        arm_instruction_list = [instruction].append(this.arm_instruction_list)
    end

    :get_arm_instructions
        arm_instruction_list
    end

    :set_arm_instructions(arm_instr)
        arm_instruction_list = arm_instr
    end

    arm_instruction_list = []
    :generate_arm
        instructions = emit_instructions()
        for i = 0; i < instructions.length!(); i++
            arm_instruction_list.append!(instructions[i].translate_to_arm())
        end
    end

    :emit_arm
        if printed_arm_counters.contains?(label)
            return ""
        end
        printed_arm_counters.add!(label)
        instr = text_label + ":"
        for i = 0; i < arm_instruction_list.length!(); i++
            instr = instr + "\n" + arm_instruction_list[i].emit_arm()
        end
        if is_conditional?()
            instr = instr + "\n" + true_successor.emit_arm()
            instr = instr + "\n" + false_successor.emit_arm()
        else if successor != {blz.nil} && successor != this
            instr = instr + "\n" + successor.emit_arm()
        end
        instr
    end

    :create_gen_kill_sets ()
        for i = 0; i < arm_instruction_list.length(); i++
            for j = 0; j < arm_instruction_list [i].source_registers.length(); j++ 
                if (kill.contains?(arm_instruction_list[i].source_registers[j])).negate()
                    gen.add(arm_instruction_list[i].source_registers[j])
                end
            end
            for j = 0; j < arm_instruction_list[i].destination_registers.length(); j++
                kill.add(arm_instruction_list[i].destination_registers[j])
            end
        end
    end


    :generate_live_out_sets
        live_out_copy = copy(live_out)
        temp = Set()
        if successor != {blz.nil}
            temp = temp.union(successor.live_out)
            temp = temp.minus(successor.kill)
            temp = temp.union(successor.gen)
            live_out = live_out.union(temp)
        end
        temp = Set()
        if true_successor != {blz.nil}
            temp = temp.union(true_successor.live_out)
            temp = temp.minus(true_successor.kill)
            temp = temp.union(true_successor.gen)
            live_out = live_out.union(temp)
        end
        temp = Set()
        if false_successor != {blz.nil}
            temp = temp.union(false_successor.live_out)
            temp = temp.minus(false_successor.kill)
            temp = temp.union(false_successor.gen)
            live_out = live_out.union(temp)
        end
        return live_out_copy == live_out
    end

    :cfg_simplification(changed_edges)

        if exit_block
            return ""
        end
        conditional_same_destination()
        straight_through!(changed_edges)
        remove_empty!(changed_edges)
        
    end

    :regen_branch
        instr = instructions[instructions.length() - 1]
        if instr.instruction_type == "Branch"
            instructions.slice!(0, instructions.length()-1)
            make_branch()
        end
    end

    :remove_block_from_phis(block)
        for i = 0; i < phis.length(); i++
            phi_instr = phis[i]
            new_sources = []
            for src_num = 0; src_num < phi_instr.sources.length(); src_num = src_num + 2
                src_block = phi_instr.sources[src_num + 1]
                if src_block != block
                    new_sources.add!(phi_instr.sources[src_num])
                    new_sources.add!(phi_instr.sources[src_num + 1])
                end
            end
            phi_instr.set_sources(new_sources)
        end
    end

    :conditional_same_destination
        if is_conditional?() && true_successor == false_successor
            set_successor(true_successor)
            set_true_successor({blz.nil})
            set_false_successor({blz.nil})
        else
            instr = instructions[instructions.length()-1]
            if instr.instruction_type == "Branch" && instr.sources != [] && instr.sources[0].type == "Integer"
                old_true_successor = true_successor
                old_false_successor = false_successor
                set_true_successor({blz.nil})
                set_false_successor({blz.nil})
                if instr.sources[0] == 0
                    set_successor(old_false_successor)
                else
                    set_successor(old_true_successor)
                end
            end
        end
    end



    #This should be last
    :straight_through(changed_edges)
        if is_conditional?().negate() && successor != {blz.nil} && successor.predecessors.length() == 1
            if successor.exit_block
                exit_block = true
            end
            #Remove the branch
            instructions.slice!(0, instructions.length()-1)
            #Add the successor's instructions
            instructions.append!(successor.instructions)
            successor.remove_predecessor(this)
            if successor.is_conditional?()
                old_edge = BlockEdge(this, successor)
                new_true_edge = BlockEdge(this, successor.true_successor)
                new_false_edge = BlockEdge(this, successor.false_successor)
                changed_edges[new_true_edge] = old_edge
                changed_edges[new_false_edge] = old_edge
                successor.true_successor.remove_predecessor(successor)
                successor.false_successor.remove_predecessor(successor)
                set_true_successor(successor.true_successor)
                set_false_successor(successor.false_successor)
            else
                if successor.successor != {blz.nil}
                    old_edge = BlockEdge(this, successor)
                    new_edge = BlockEdge(this, successor.successor)
                    changed_edges[new_edge] = old_edge
                    successor.successor.remove_predecessor(successor)
                    set_successor(successor.successor)
                else
                    successor = {blz.nil}
                end
            end
        end
    end

    :remove_empty(changed_edges)
        if empty?() && successor != {blz.nil}
            for i = 0; i < predecessors.size(); i++
                pred = predecessors[i]
                old_edge = BlockEdge(pred, this)
                new_edge = BlockEdge(pred, successor)
                changed_edges[new_edge] = old_edge
                if pred.successor == this
                    pred.set_successor(successor)
                end
                if pred.true_successor == this
                    pred.set_true_successor(successor)
                end
                if pred.false_successor == this
                    pred.set_false_successor(successor)
                end
            end
        end
    end

    :recalculate_phis(changed_edges, function_blocks)
        # find any of the edges where this was set to be a new destination
        relevant_edges = changed_edges.keys().filter(x -> x.dest == this)
        for i = 0; i < phis.size(); i++
            new_phi_srcs = []
            phi = phis[i]
            for j = 0; j < phi.sources.size(); j = j + 2
                new_incoming_edge = phi.sources[j + 1]
                old_incoming_edge = phi.sources[j + 1]
                for k = 0; k < relevant_edges.size(); k++
                    old_edge = changed_edges[relevant_edges[k]]
                    if old_incoming_edge == old_edge.dest
                        new_incoming_edge = old_edge.src
                    end
                end
                if function_blocks.contains?(new_incoming_edge)
                    new_phi_srcs.add!(phi.sources[j])
                    new_phi_srcs.add!(new_incoming_edge)
                end
            end
            # Change the sources of the phis
            phi.set_sources(new_phi_srcs)
        end
    end


end


constructor BlockEdge(src, dest)
    :show
        src + " -> " + dest
    end

    :==(other)
        other.type == "BlockEdge" && src == other.src && dest == other.dest
    end
end