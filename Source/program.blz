require types/primitive_type
require declaration

constructor Program(types, functions, declarations)

    :emit_llvm
        types.each(x -> print(x.emit_llvm()))
        declarations.each(x -> print(x.emit_llvm()))
        for i = 0; i < functions.length(); i++
            print(functions[i].emit_llvm())
        end
        print("\ndeclare i8* @malloc(i32)\n
                declare void @free(i8*)\n
                declare i32 @printf(i8*, ...)\n
                declare i32 @scanf(i8*, ...)\n
                @.println = private unnamed_addr constant [5 x i8] c\"%ld\\0A\\00\", align 1\n
                @.print = private unnamed_addr constant [5 x i8] c\"%ld \\00\", align 1\n
                @.read = private unnamed_addr constant [4 x i8] c\"%ld\\00\", align 1\n
                @.read_scratch = common global i32 0, align 4")
    end

    :typecheck
        # add the structs
        struct_map = {}
        for i = 0; i < types.length!(); i++
            struct_map[types[i].id] = types[i]
        end

        # add all of the global ids
        id_map = {}
        for i = 0; i < functions.length!(); i++
            id_map[functions[i].id] = Declaration(functions[i].line, functions[i].id, functions[i].typ, "global")
        end
        for i = 0; i < declarations.length!(); i++
            id_map[declarations[i].id] = declarations[i]
        end

        # Type check each of the functions
        # Intentionally do not pass by reference
        # We want a copy of the id and struct maps
        for i = 0; i < functions.length!(); i++
            functions[i].typecheck(id_map, struct_map)
        end

        potential_main_functions = functions.filter(x -> x.id == "main")
        if potential_main_functions.length!() != 1
            print("Invalid number of main functions!")
            primitive_type("error")
        else
            if potential_main_functions[0].return_type.can_not_become(primitive_type("int"))
                print("Expected main function to return int")
                primitive_type("error")
            end
            if potential_main_functions[0].parameters.length!() != 0
                print("Expected main function to take no parameters")
                primitive_type("error")
            end
        end


        if type_errors() > 0
            print(type_errors() + " error(s) have occurred!")
            exit(1)
        end
    end
    
end