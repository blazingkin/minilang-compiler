require types/primitive_type
require declaration
import DataStructures

constructor Program(types, functions, declarations)

    :emit_function_llvm(function)
        result = function.emit_llvm()
        print_queue.push(result)
        waiting_on[function.id] = false
    end

    :emit_llvm
        types.each(x -> print(x.emit_llvm()))
        declarations.each(x -> print(x.emit_llvm()))
        for i = 0; i < functions.length(); i++
            waiting_on[functions[i].id] = true
            function = functions[i]
            async emit_function_llvm(function)
            sleep(500)
        end
        while waiting_on.values().any?() || print_queue.size() > 0
            sleep(1000)
            while print_queue.size() > 0
                print(print_queue.pop())
            end
        end
        print("\ndeclare i8* @malloc(i32)\ndeclare void @free(i8*)\ndeclare void @print(i32)\ndeclare void @printl(i32)\ndeclare i32 @readchar()\n")
    end


    :emit_function_arm(function)
        try
            result = ""
            result = result + ".text\n"
            result = result + ".align 2\n"
            result = result + ".global " + function.id + "\n"
            result = result + function.emit_arm() + "\n"
            result = result + ".size " + function.id + ", .-"+function.id
            print_queue.push(result)
            waiting_on[function.id] = false
        catch err
            throw "ERR in async"
        end
    end

    print_queue = Stack()
    waiting_on = {}

    :emit_arm
        # Print the program prologue
        print(".arch armv7-a")
        print(".global __aeabi_idiv")
        # Print the global declarations
        for i = 0; i < declarations.length(); i++
            print(".comm " +declarations[i].id + " 4,4")
        end
        length = functions.length()
        for unique_index = 0; unique_index < length; unique_index++
            # Print the function setup
            waiting_on[functions[unique_index].id] = true
            function = functions[unique_index]
            if unique_index < length
                async emit_function_arm(function)
            end
            sleep(500)
        end
        while waiting_on.values().any?() || print_queue.size() > 0
            sleep(1000)
            while print_queue.size() > 0
                print(print_queue.pop())
            end
        end
    end

    :typecheck
        # add the structs
        struct_map = {}
        for i = 0; i < types.length!(); i++
            struct_map[types[i].id] = types[i]
        end

        # add all of the global ids
        id_map = {}
        for i = 0; i < functions.length!(); i++
            id_map[functions[i].id] = Declaration(functions[i].line, functions[i].id, functions[i].typ, "global")
        end
        for i = 0; i < declarations.length!(); i++
            id_map[declarations[i].id] = declarations[i]
        end

        # Type check each of the functions
        # Intentionally do not pass by reference
        # We want a copy of the id and struct maps
        for i = 0; i < functions.length!(); i++
            functions[i].typecheck(id_map, struct_map)
        end

        potential_main_functions = functions.filter(x -> x.id == "main")
        if potential_main_functions.length!() != 1
            print("Invalid number of main functions!")
            primitive_type("error")
        else
            if potential_main_functions[0].return_type.can_not_become(primitive_type("int"))
                print("Expected main function to return int")
                primitive_type("error")
            end
            if potential_main_functions[0].parameters.length!() != 0
                print("Expected main function to take no parameters")
                primitive_type("error")
            end
        end


        if type_errors() > 0
            print(type_errors() + " error(s) have occurred!")
            exit(1)
        end
    end
    
end