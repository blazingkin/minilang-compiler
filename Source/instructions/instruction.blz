require register
require arm_instruction
require ../types/primitive_type
constructor InstructionError(message)
    :show
        message
    end
end

:register_filter(x)
    x.type == "VirtualRegister"
end

MAX_THAT_CAN_FIT_IN_OP_TWO = (2 ** 9) - 1
constructor Instruction(instruction_type, sources, destinations, typ)
    marked = false
    if sources.type == "Array"
        for i = 0; i < sources.length!(); i++
            if sources[i].type == "VirtualRegister"
                sources[i].add_use(this)
            end
        end
    else
        throw "Sources should always be an array"
    end

    source_registers = sources.filter(register_filter)
    
    if destinations.type == "Array"
        for i = 0; i < destinations.length!(); i++
            if destinations[i].type == "VirtualRegister"
                destinations[i].add_source(this)
            end
        end
    else if destinations.type == "VirtualRegister"
        throw "Bad instruction destination"
        destinations.add_source(this)
    else if destinations == {blz.nil}
        destinations = []
    end

    destination_registers = destinations.filter(register_filter)


    :set_n_destination(n, val)
        destinations[n] = val
        destination_registers = destinations.filter(register_filter)
    end

    :set_n_source(n, val)
        sources[n] = val
        source_registers = sources.filter(register_filter)
    end

    :show
        "<" + instruction_type + " from " + sources + " to " + destinations + ">"
    end

    :copy
        this
    end

    :val_to_llvm(val)
        if val.type == "Integer" || val.type == "String"
            val
        else if val.type == "CFGNode"
            val.text_label
        else
            val.emit_llvm()
        end
    end

    :val_to_arm(val)
        if val.type == "Integer" || val.type == "String"
            val
        else
            val.emit_arm()
        end
    end

    top = "TOP"
    bottom = "BOTTOM"
    binary_instructions = {}
    binary_instructions["add"] = (x,y -> x + y)
    binary_instructions["sub"] = (x,y -> x - y)
    binary_instructions["mul"] = (x,y -> x * y)
    binary_instructions["and"] = (x,y -> x & y)
    :or_binary(x, y)
        if x == 1 || y == 1
            1
        else
            0
        end
    end
    :sdiv(x, y)
        result = 0
        if y == 0
            return bottom
        end
        while x > y
            x = x - y
            result++
        end
        result
    end
    binary_instructions["sdiv"] = sdiv
    binary_instructions["or"] = or_binary
    binary_instructions["xor"] = (x,y -> x ^ y)

    :evaluate(values)
        # Certain instruction types will always return bottom
        if ["FunctionCall", "Load", "Store", "GetElement", "Return", "Branch", "Allocation", "Comparison"].contains?(instruction_type)
            return bottom
        end




        for i = 0; i < sources.length(); i++
            src = sources[i]
            if src.type == "VirtualRegister" && values.has_key?(src) && values[src] == bottom
                return bottom
            end
        end



        # Resolve the value references if they are present in the map
        fully_resolved = sources.copy()
        for i = 0; i < fully_resolved.length(); i++
            if values.has_key?(fully_resolved[i])
                fully_resolved[i] = values[fully_resolved[i]]
            end
        end

        if ["bitcast", "trunc", "zext"].contains?(instruction_type)
            return fully_resolved[0]    
        end

        if ["Comparison"].contains?(instruction_type)
            # TODO propogate constants through comparison
        end

        # Do abstract evaluation of binary instructions
        if binary_instructions.has_key?(instruction_type)
            if fully_resolved[0].type == "Integer" && fully_resolved[1].type == "Integer"
                return binary_instructions[instruction_type](fully_resolved[0], fully_resolved[1])
            else
                return top
            end
        end 

        if instruction_type == "NegateInteger"
            if fully_resolved[0].type == "Integer"
                return -1 * fully_resolved[0]
            else
                return top
            end
        end
        if instruction_type == "NegateBoolean"
            if fully_resolved[0].type == "Integer"
                return 1 ^ fully_resolved[0]
            else
                return top
            end
        end

        if instruction_type == "Phi"
            values = []
            for i = 0; i < fully_resolved.length(); i = i + 2
                values.add!(fully_resolved[i])
            end
            return meet(values)
        end
        throw "Unknown instruction type (constant propogation evaluate) " + instruction_type
    end

    :meet(values)
        non_top = values.filter(x -> x != top)
        if non_top.empty?()
            return top
        end
        all_same = true
        for i = 0; i < non_top.length(); i++
            all_same = all_same && (non_top[i] == non_top[0])
        end
        if all_same
            return non_top[0]
        else
            return bottom
        end
    end

    :emit_llvm
        # "Label", label_name
        if instruction_type == "Label"
            return "LU" + sources + ":"
        else if instruction_type == "Branch"
            if sources == []
                # Unconditional branch
                return "br label %LU" + destinations[0]
            else
                # Conditional branch
                return "br i1 " + val_to_llvm(sources[0]) + ", label %LU" + destinations[0] + ", label %LU" + destinations[1]
            end
        else if instruction_type == "add" || instruction_type == "mul" || instruction_type == "sdiv" || instruction_type == "sub" || instruction_type == "and" || instruction_type == "or" || instruction_type == "xor"
            # Arithmatic and Boolean instructions
            return val_to_llvm(destinations [0]) + " = " + instruction_type + " " + typ + " " + val_to_llvm(sources [0]) + ", " + val_to_llvm(sources [1])
        else if instruction_type == "Return"
            if sources == []
                return "ret void"
            else
                return "ret " + typ + " " + val_to_llvm(sources [0])
            end
        else if instruction_type == "Comparison"
            return val_to_llvm(destinations [0]) + " = " + "icmp " + sources [0] + " " + typ + " " + val_to_llvm(sources [1]) + ", " + val_to_llvm(sources [2])
        else if instruction_type == "Allocation"
            return val_to_llvm(destinations [0]) + " = alloca " + typ
        else if instruction_type == "bitcast" || instruction_type == "trunc" || instruction_type == "zext"
            return val_to_llvm(destinations [0]) + " = " + instruction_type + " " + typ + " " + val_to_llvm(sources [0]) + " to " + sources [1]
        else if instruction_type == "Load"
            return val_to_llvm(destinations [0]) + " = load " + typ + ", " + typ + "* " + val_to_llvm(sources [0])
        else if instruction_type == "Store"
            return "store " + typ + " " + val_to_llvm(sources [0]) + ", " + typ + "* " + val_to_llvm(sources[1])
        else if instruction_type == "GetElement"
            return val_to_llvm(destinations [0]) + " = getelementptr " + typ.llvm_no_pointer() + ", " + typ + " " + val_to_llvm(sources [0]) + ", i1 0, i32 " + val_to_llvm(sources [1])
        # Needs to be resoved
        else if instruction_type == "NegateInteger"
            val_to_llvm(destinations[0]) + " = sub i32 0, " + val_to_llvm(sources[0])
        else if instruction_type == "NegateBoolean"
            # Negate by XORing with 1
            val_to_llvm(destinations[0]) + " = xor i32 1, " + val_to_llvm(sources[0])
        else if instruction_type == "FunctionCall"
            if destinations != []
                llvm = val_to_llvm(destinations[0]) + " = "
            else
                llvm = ""
            end
            llvm = llvm + "call " + typ + " @" + sources[0] + "("
            for i = 1; i < sources.length(); i = i + 2
                if i != 1
                    llvm = llvm + ", "
                end
                llvm = llvm + val_to_llvm(sources [i]) + " " + val_to_llvm(sources [i + 1])
            end
            llvm = llvm + ")"
            return llvm
        else if instruction_type == "Phi"
            llvm = val_to_llvm(destinations[0]) + " = phi " + typ
            for i = 0; i < sources.length(); i = i + 2
                if i != 0
                    llvm = llvm + ","
                end
                llvm = llvm + " [ " + val_to_llvm(sources[i]) + ", %" + val_to_llvm(sources[i+1]) + " ]"
            end
            return llvm
        else
            throw InstructionError("Unknown instruction type " + instruction_type)
        end
    end
    
    # Returns an array of ARMInstructions
    :translate_to_arm
        # "Label", label_name
        if instruction_type == "Label"
            result = []
            return result
        else if instruction_type == "mov"
            result = [ARMInstruction("mov", sources, destinations)]
            return result
        else if instruction_type == "Branch"
            if sources == []
                # Unconditional branch
                return [ARMInstruction("b", sources, destinations)]
            else
                # Conditional branch
                # Compare then branch if equal or branch if not equal
                result = []
                src = sources[0]
                if src.type == "Integer"
                    scratch = VirtualRegister()
                    result.add!(ARMInstruction("movw", [":lower16: " + src], [scratch]))
                    result.add!(ARMInstruction("movt", [":upper16: " + src], [scratch]))
                    src = scratch
                end
                result.add!(ARMInstruction("cmp", [src, 1], []))
                result.add!(ARMInstruction("beq", [], [destinations[0]]))
                result.add!(ARMInstruction("bne", [], [destinations[1]]))
                return result
            end
        else if (instruction_type == "add" || instruction_type == "mul" || instruction_type == "sub" || instruction_type == "and")
            return do_arithmatic_and_boolean(instruction_type)
        else if instruction_type == "or"
            return do_arithmatic_and_boolean("orr")
        else if instruction_type == "xor"
            return do_arithmatic_and_boolean("eor")
        else if instruction_type == "sdiv"
            result = []
            result.add!(ARMInstruction("mov", [sources[0]], [ARMRegister(0)]))
            result.add!(ARMInstruction("mov", [sources[1]], [ARMRegister(1)]))
            result.add!(ARMInstruction("bl", [ARMRegister(0), ARMRegister(1), ARMRegister(2), ARMRegister(3)], ["__aeabi_idiv", ARMRegister(0), ARMRegister(1)]))
            result.add!(ARMInstruction("mov", [ARMRegister(0)], [destinations[0]]))
            return result
        else if instruction_type == "Return"
            result = []
            if sources == [] || typ == primitive_type("void")
                return result
            else
                src = sources[0]
                if src == "null"
                    src = 0
                end
                if src.type == "Integer" && (src > MAX_THAT_CAN_FIT_IN_OP_TWO || src < 0)
                    result.add!(ARMInstruction("movw", ["\#:lower16:" + src], [ARMRegister(0)]))
                    result.add!(ARMInstruction("movt", ["\#:upper16:" + src], [ARMRegister(0)]))
                else
                    result.add!(ARMInstruction("mov", [src], [ARMRegister(0)]))
                end
                return result
            end
        else if instruction_type == "Comparison"
            result = []
            result.add!(ARMInstruction("mov", ["\#0"], [destinations[0]]))
            arg_one = sources[1]
            if arg_one.type == "Integer"
                scratch = VirtualRegister()
                result.add!(ARMInstruction("movw", ["\#:lower16: " + arg_one], [scratch]))
                result.add!(ARMInstruction("movt", ["\#:upper16: " + arg_one], [scratch]))
                arg_one = scratch
            else if arg_one == "null"
                scratch = VirtualRegister()
                result.add!(ARMInstruction("mov", [0], [scratch]))
                arg_one = scratch
            end

            arg_two = sources[2]
            if arg_two == "null"
                arg_two = "0"
            else if arg_two.type == "Integer" && (arg_two > MAX_THAT_CAN_FIT_IN_OP_TWO || arg_two < 0)
                scratch = VirtualRegister()
                result.add!(ARMInstruction("movw", ["\#:lower16: " + arg_two], [scratch]))
                result.add!(ARMInstruction("movt", ["\#:upper16: " + arg_two], [scratch]))
                arg_two = scratch
            end
            result.add!(ARMInstruction("cmp", [arg_one, arg_two], []))
            move = ""
            if sources[0] == "eq"
              move = "moveq"
            else if sources[0] == "ne"
              move = "movne"
            else if sources[0] == "sgt"
              move = "movgt"
            else if sources[0] == "sge"
              move = "movge"
            else if sources[0] == "slt"
              move = "movlt"
            else if sources[0] == "sle"
              move = "movle"
            end
            result.add!(ARMInstruction(move, ["\#1"], [destinations[0]]))
            return result
        else if instruction_type == "Allocation"
            result = []
            return result
            return val_to_llvm(destinations [0]) + " = alloca " + typ
        else if instruction_type == "bitcast" || instruction_type == "trunc" || instruction_type == "zext"
            src = sources[0]
            if sources[0] == "null"
                src = 0
            end
            return [ARMInstruction("mov", [src], [destinations[0]])]
        else if instruction_type == "Load"
            result = []

            # Figure out where the destination should be, could be a global
            load_from = sources[0]
            if load_from.type == "VirtualRegister" && load_from.place == "global"
                scratch = VirtualRegister()
                result.add!(ARMInstruction("movw", ["\#:lower16: " + load_from.name], [scratch]))
                result.add!(ARMInstruction("movt", ["\#:upper16: " + load_from.name], [scratch]))
                load_from = scratch
            end

            result.add!(ARMInstruction("ldptr", [load_from], [destinations[0]]))
            return result
        else if instruction_type == "Store"
            result = []
            
            # Figure out where the destination should be, could be a global
            store_to = sources[1]
            if store_to.type == "VirtualRegister" && store_to.place == "global"
                scratch = VirtualRegister()
                result.add!(ARMInstruction("movw", ["\#:lower16: " + store_to.name], [scratch]))
                result.add!(ARMInstruction("movt", ["\#:upper16: " + store_to.name], [scratch]))
                store_to = scratch
            end

            # Handle if the store a number or null
            if sources[0].type == "Integer"
                scratch = VirtualRegister()
                result.add!(ARMInstruction("movw", ["\#:lower16: " + sources[0]], [scratch]))
                result.add!(ARMInstruction("movt", ["\#:upper16: " + sources[0]], [scratch]))
                result.add!(ARMInstruction("stptr", [scratch, store_to]))
            else if sources[0] == "null"
                scratch = VirtualRegister()
                result.add!(ARMInstruction("mov", [0], [scratch]))
                result.add!(ARMInstruction("stptr", [scratch, store_to]))
            else
                result.add!(ARMInstruction("stptr", [sources[0], store_to], []))
            end
            return result
        else if instruction_type == "GetElement"
            result = []
            result.add!(ARMInstruction("add", [sources[0], "\#" + sources[1] * 4], [destinations[0]]))
            return result
        # Needs to be resoved
        else if instruction_type == "NegateInteger"
            result = []
            if sources[0].type == "Integer" && (sources[0] > MAX_THAT_CAN_FIT_IN_OP_TWO || sources[0] < 0)
                # Constant that is too big
                scratch_one = VirtualRegister()
                scratch_two = VirtualRegister()
                # Move the lower half into the scratch
                result.add!(ARMInstruction("movw", ["\#:lower16: " + val_to_arm(sources[0])], [scratch_one]))
                # Move the upper half into the scratch
                result.add!(ARMInstruction("movt", ["\#:upper16: " + val_to_arm(sources[0])], [scratch_one]))
                # Load zero into the second scratch
                result.add!(ARMInstruction("mov", ["\#0"], [scratch_two]))
                result.add!(ARMInstruction("sub", [scratch_two, scratch_one], [destinations[0]]))
                return result
            else
                scratch_one = VirtualRegister()
                result.add!(ARMInstruction("mov", ["\#0"], scratch_one))
                result.add!(ARMInstruction("sub", [scratch_one, sources[0]], [destinations[0]]))
                return ld_zero + sub
            end
            return result
        else if instruction_type == "NegateBoolean"
            result = []
            result.add!(ARMInstruction("eor", [sources[0], "\#1"], [destinations[0]]))
            return result
        else if instruction_type == "FunctionCall"
            result = []
            call_register = 0
            used_registers = []
            # Set up the calling registers
            for i = 1; i < sources.length() && i < 9; i = i + 2
                # Type is in sources[i], value is in sources[i + 1]
                src = sources[i + 1]
                if src == "null"
                    src = 0
                end
                if src.type == "Integer" && (src < 0 || src > MAX_THAT_CAN_FIT_IN_OP_TWO)
                    scratch = VirtualRegister()
                    result.add!(ARMInstruction("movw", ["\#:lower16: "+ src], [scratch]))
                    result.add!(ARMInstruction("movt", ["\#:upper16: "+ src], [scratch]))
                    src = scratch
                end
                result.add!(ARMInstruction("mov", [src], [ARMRegister(call_register)]))
                used_registers.add!(ARMRegister(call_register))
                call_register++
            end
            # Set up extra parameters on the stack
            for i = 9; i < sources.length(); i = i + 2
                src = sources[i + 1]
                if src.type == "VirtualRegister" || src.type == "ARM_Register"
                    used_registers.add!(sources[i + 1])
                    result.add!(ARMInstruction("pushone", [src], []))
                else if src.type == "Integer"
                    scratch = VirtualRegister()
                    result.add!(ARMInstruction("movw", ["\#:lower16: "+ src], [scratch]))
                    result.add!(ARMInstruction("movt", ["\#:upper16: "+ src], [scratch]))
                    result.add!(ARMInstruction("pushone", [scratch], []))
                else if src.type == "null"
                    scratch = VirtualRegister()
                    result.add!(ARMInstruction("mov", ["\#0"], [scratch]))
                    result.add!(ARMInstruction("pushone", [scratch], []))
                end
                
            end
            # Call the function
            result.add!(ARMInstruction("bl", [ARMRegister(0), ARMRegister(1), ARMRegister(2), ARMRegister(3)], [sources[0]+""].append(used_registers)))
            if destinations != []
                if destinations[0].type == "Integer" && (destinations[0] > MAX_THAT_CAN_FIT_IN_OP_TWO || destinations[0] < 0)
                    result.add!(ARMInstruction("movw", ["\#:lower16: " + ARMRegister(0)], [destinations[0]]))
                    result.add!(ARMInstruction("movt", ["\#:upper16: " + ARMRegister(0)], [destinations[0]]))
                else
                    result.add!(ARMInstruction("mov", [ARMRegister(0)], [destinations[0]]))
                end
            end
            return result
        else if instruction_type == "Phi"
            throw "Phi instructions should not be emitted for ARM"
        else
            throw InstructionError("Unknown instruction type " + instruction_type)
        end
    end

    :do_arithmatic_and_boolean (instruction_code)
        result = []
        if instruction_type == "mul"
            left = sources[0]
            if left.type == "Integer"
                left = VirtualRegister()
                result.add!(ARMInstruction("movw", ["\#:lower16: " + sources[0]], [left]))
                result.add!(ARMInstruction("movt", ["\#:upper16: " + sources[0]], [left]))
            end
            right = sources[1]
            if right.type == "Integer"
                right = VirtualRegister()
                result.add!(ARMInstruction("movw", ["\#:lower16: " + sources[1]], [right]))
                result.add!(ARMInstruction("movt", ["\#:upper16: " + sources[1]], [right]))
            end
            result.add!(ARMInstruction("mul", [left, right], [destinations[0]]))
            return result
        end
        if sources[0].type == "Integer"
            # Constant that is too big
            scratch_one = VirtualRegister()
            # Load the lower part of the constant
            result.add!(ARMInstruction("movw", ["\#:lower16: " + val_to_arm(sources[0])], [scratch_one]))
            # Load the upper part of the constant
            result.add!(ARMInstruction("movt", ["\#:upper16: " + val_to_arm(sources[0])], [scratch_one]))
            # Do the operation
            result.add!(ARMInstruction(instruction_code, [scratch_one, sources[1]], [destinations[0]]))
            return result
        end
        if sources [1].type == "Integer" && ((sources[1] > MAX_THAT_CAN_FIT_IN_OP_TWO || (sources[1] < 0)))
            # Constant that is too big
            scratch_one = VirtualRegister()
            # Load the lower part of the constant
            result.add!(ARMInstruction("movw", ["\#:lower16: " + val_to_arm(sources[1])], [scratch_one]))
            # Load the upper part of the constant
            result.add!(ARMInstruction("movt", ["\#:upper16: " + val_to_arm(sources[1])], [scratch_one]))
            # Do the operation
            result.add!(ARMInstruction(instruction_code, [scratch_one, sources[0]], [destinations[0]]))
            return result
        end
        result.add!(ARMInstruction(instruction_code, [sources[0], sources[1]], [destinations[0]]))
        return result
    end



end
