

constructor ARMInstruction(instruction_type, sources, destinations)

    :to_arm(val)
        if val.type == "Integer" || val.type == "String"
            val
        else
            try
                val.emit_arm()
            catch err
                throw "A value " + val + " failed when trying to emit arm. Error: \n\t" + err
            end
        end
    end

    :emit_arm
        if type == "add" || type == "sub" || type == "mul" || type == "and" || type == "orr" || type == "eor"
            type + " " + to_arm(destinations[0]) + ", " + to_arm(sources[0]) + ", " + to_arm(sources[1])
        else if type == "cmp"
            "cmp " + to_arm(sources[0]) + ", " + to_arm(sources[1])
        else if type == "beq" || type == "bne" || type == "bge" || type == "blt" || type == "b" || type == "bl"
            type + " " + to_arm(destinations[0])
        else if type == "mov" || type == "movw" || type == "movt" || type == "movt" || type == "movt" || type == "moveq" || type == "movlt" || type == "movne" || type == "movge"
            type + " " + to_arm(destinations[0]) + ", " + to_arm(sources[0])
        else if type == "ldr" || type == "str"
            type + " " + to_arm(destinations[0]) + ", " + to_arm(sources[0])
        else if type == "push" || type == "pop"
            type + " " + destinations[0]
        end
    end

end