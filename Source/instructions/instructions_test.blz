import Test
require instruction

constructor MockNode()

end

constructor MockRegister(number, ll_no_pointer)

    :emit_llvm
        "%" + number
    end

    :emit_arm
        "%" + number
    end

    :==(other)
        number == other.number
    end

end

constructor MockType(typ, struct)
    :show
        emit_llvm()
    end

    :emit_llvm
        if struct
            typ + "*"
        else
            typ
        end
    end

    :llvm_no_pointer
        typ
    end
end

:test_emit_label_llvm
    llvm = Instruction("Label", 3, {blz.nil}).emit_llvm()
    expect(llvm).is("LU3:")
end

:test_emit_branch_instruction_unconditional
    instr = Instruction("Branch", [], [7], {blz.nil})
    llvm = instr.emit_llvm()
    expect(llvm).is("br label %LU7")
    arm = instr.emit_arm()
    expect(arm).is("b LU7")
end

:test_emit_branch_instruction_llvm_conditional
    llvm = Instruction("Branch", [MockRegister(10)], [3, 11], {blz.nil}).emit_llvm()
    expect(llvm).is("br i1 %10, label %LU3, label %LU11")
end

:test_emit_add_instruction
    instr = Instruction("add", [MockRegister(0), MockRegister(1)], [MockRegister(2)], "i32")
    llvm = instr.emit_llvm()
    expect(llvm).is("%2 = add i32 %0, %1")
    arm = instr.emit_arm()
    expect(arm).is("add %2, %0, %1")
end

:test_emit_mul_instruction
    instr = Instruction("mul", [MockRegister(0), MockRegister(1)], [MockRegister(2)], "i32")
    llvm = instr.emit_llvm()
    expect(llvm).is("%2 = mul i32 %0, %1")
    arm = instr.emit_arm()
    expect(arm).is("mul %2, %0, %1")
end

:test_emit_sdiv_instruction_llvm
    llvm = Instruction("sdiv", [MockRegister(0), MockRegister(1)], [MockRegister(2)], "i32").emit_llvm()
    expect(llvm).is("%2 = sdiv i32 %0, %1")
end

:test_emit_sub_instruction
    instr = Instruction("sub", [MockRegister(0), MockRegister(1)], [MockRegister(2)], "i32")
    llvm = instr.emit_llvm()
    expect(llvm).is("%2 = sub i32 %0, %1")
    arm = instr.emit_arm()
    expect(arm).is("sub %2, %0, %1")
end

:test_emit_and_instruction
    instr = Instruction("and", [MockRegister(0), MockRegister(1)], [MockRegister(2)], "i32")
    llvm = instr.emit_llvm()
    expect(llvm).is("%2 = and i32 %0, %1")
    arm = instt.emit_arm()
    expect(arm).is("and %2, %0, %1")
end

:test_emit_or_instruction
    instr = Instruction("or", [MockRegister(0), MockRegister(1)], [MockRegister(2)], "i32")
    llvm = instr.emit_llvm()
    expect(llvm).is("%2 = or i32 %0, %1")
    arm = instr.emit_arm()
    expect(arm).is("orr %2, %0, %1")
end

:test_emit_xor_instruction
    instr = Instruction("xor", [MockRegister(0), MockRegister(1)], [MockRegister(2)], "i32")
    llvm = instr.emit_llvm()
    expect(llvm).is("%2 = xor i32 %0, %1")
    arm = instr.emit_arm()
    expect(arm).is("eor %2, %0, %1")
end

:test_emit_return_instruction_llvm_void
    llvm = Instruction("Return", [], [], {blz.nil}).emit_llvm()
    expect(llvm).is("ret void")
end

:test_emit_return_instruction_llvm_not_void
    llvm = Instruction("Return", [MockRegister(0)], [], "i32").emit_llvm()
    expect(llvm).is("ret i32 %0")
end

:test_emit_comparison_instruction_llvm
    llvm = Instruction("Comparison", ["eq", MockRegister(0), MockRegister(1)], [MockRegister(2)], "i32").emit_llvm()
    expect(llvm).is("%2 = icmp eq i32 %0, %1")
end

:test_emit_allocation_instruction_llvm
    llvm = Instruction("Allocation", [], [MockRegister(0)], "i32").emit_llvm()
    expect(llvm).is("%0 = alloca i32")
end

:test_emit_bitcast_instruction_llvm
    llvm = Instruction("bitcast", [MockRegister(0), "i1"], [MockRegister(1)], "i32").emit_llvm()
    expect(llvm).is("%1 = bitcast i32 %0 to i1")
end

:test_emit_trunc_instruction_llvm
    llvm = Instruction("trunc", [MockRegister(0), "i1"], [MockRegister(1)], "i32").emit_llvm()
    expect(llvm).is("%1 = trunc i32 %0 to i1")
end

:test_emit_zext_instruction_llvm
    llvm = Instruction("zext", [MockRegister(0), "i32"], [MockRegister(1)], "i1").emit_llvm()
    expect(llvm).is("%1 = zext i1 %0 to i32")
end

:test_emit_load_instruction_llvm
    llvm = Instruction("Load", [MockRegister(0)], [MockRegister(1)], "i32").emit_llvm()
    expect(llvm).is("%1 = load i32, i32* %0")
end

:test_emit_store_instruction_llvm_from_register
    llvm = Instruction("Store", [MockRegister(0)], [MockRegister(1)], "i32").emit_llvm()
    expect(llvm).is("store i32 %0, i32* %1")
end

:test_emit_store_instruction_llvm_from_immediate
    llvm = Instruction("Store", [7], [MockRegister(1)], "i32").emit_llvm()
    expect(llvm).is("store i32 7, i32* %1")
end

:test_emit_getelementptr_instruction_llvm
    llvm = Instruction("GetElement", [MockRegister(0), 1], [MockRegister(1)], MockType("struct_type", true)).emit_llvm()
    expect(llvm).is("%1 = getelementptr struct_type, struct_type* %0, i1 0, i32 1")
end

:test_emit_call_instruction_llvm_no_args
    llvm = Instruction("FunctionCall", ["foo"],[MockRegister(0)], "i32").emit_llvm()
    expect(llvm).is("%0 = call i32 @foo()")
end

:test_emit_call_instruction_llvm_one_arg
    llvm = Instruction("FunctionCall", ["foo", "i32", MockRegister(1)],[MockRegister(0)], "i32").emit_llvm()
    expect(llvm).is("%0 = call i32 @foo(i32 %1)")
end

:test_emit_call_instruction_llvm_multiple_args
    llvm = Instruction("FunctionCall", ["foo", "i32", MockRegister(1), "%struct.A*", MockRegister(2), "i32", MockRegister(3)],[MockRegister(0)], "i32").emit_llvm()
    expect(llvm).is("%0 = call i32 @foo(i32 %1, %struct.A* %2, i32 %3)")
end

:test_emit_phi_instruction
    llvm = Instruction("Phi", [MockRegister(1), "%L1", MockRegister(2), "%L3"], [MockRegister(0)], "i32").emit_llvm()
    expect(llvm).is("%0 = phi i32 [ %1, %L1 ], [ %2, %L3 ]")
end
