import JSON
import FileSystem
import Flag
require declaration
require types/struct_type
require function
require program


llvm_stack = Flag("s", "bool", false, false, "Stack Based LLVM Code Generation", "llvm-stack").value

:main
    program_json = open({arguments}[0]).read_all()
    program = json_to_ast(program_json)
    program.typecheck()
    if emitting_llvm?()
        output = program.emit_llvm()
    end
end

:json_to_ast(json)
    parsed = parse_json(json)
    types = parsed["types"].map!(parse_struct_type)
    functions = parsed["functions"].map!(parse_function)
    parse_global = (x -> parse_declaration(x, "global"))
    declarations = parsed["declarations"].map!(parse_global)
    Program(types, functions, declarations)
end


:stack_based?
    llvm_stack || {arguments}.contains?("-stack")
end

:emitting_llvm?
    true
end

:set_stack_based_for_test(val)
    llvm_stack = val
end
