require ast_factory
require ../types/primitive_type
require ../cfg/cfg_node

constructor IfNode(cond, main, line, els)

    has_else? = els != {blz.nil}

    :show
        if has_else?
            "<If " + cond + "\n\tthen " + main + "\n\telse " + els +">"
        else
            "<If " + cond + "\n\tthen " + main + ">"
        end
    end

    :typecheck (symbol_table, struct_map)
        cond_type = cond.typecheck (symbol_table, struct_map)
        main_type = main.typecheck (symbol_table, struct_map)
        if has_else?
            els_type = els.typecheck (symbol_table, struct_map)
        end
        if cond_type.can_not_become (primitive_type("bool"))
            print ("Type error on line: " + line + " Expected boolean expression as a conditional but found a(n) " + cond_type + " instead.")
            return primitive_type ("error")
        end
    end

    :translate (CFGNode n)
        //set condition on n
        t = CFGNode ()
        t.add_predecessor (n)
        main.translate (t)
        n.set_t_successor (t)

        if has_else?
            f = CFGNode ()
            f.add_predecessor (n)
            els.translate (f)
            n.set_f_successor (f)
        end

        join = CFGNode ()
        join.add_predecessor (t)
        t.add_successor (join)

        if has_else?
            join.add_predecessor (f)
            f.add_successor (join)
        else
            join.add_predecessor (n)
        end

        join

    end

end

:parse_if_node(json)
    cond = create_node!(json["guard"])
    main = create_node!(json["then"])
    if json.has_key?("else")
        els = create_node!(json["else"])
        IfNode!(cond, main, json["line"], els)
    else
        IfNode!(cond, main, json["line"])
    end
end