require ast_factory
require ../types/primitive_type
require ../cfg/cfg_node
require ../instructions/register
require ../instructions/instruction

constructor IfNode(cond, main, line, els)
    statement? = true
    expression? = false
    has_else? = els != {blz.nil}

    :show
        if has_else?
            "<If " + cond + "\n\tthen " + main + "\n\telse " + els +">"
        else
            "<If " + cond + "\n\tthen " + main + ">"
        end
    end

    :typecheck(symbol_table, struct_map)
        cond_type = cond.typecheck (symbol_table, struct_map)
        main_type = main.typecheck (symbol_table, struct_map)
        if has_else?
            els_type = els.typecheck (symbol_table, struct_map)
        end
        if cond_type.can_not_become (primitive_type("bool"))
            print ("Type error on line: " + line + " Expected boolean expression as a conditional but found a(n) " + cond_type + " instead.")
            return primitive_type ("error")
        end
    end

    :translate_stmt(current_node, return_node)
        # generate condition
        val = cond.translate(current_node)
        if val.type == "VirtualRegister" && val.content_type.show() != "i1"
            truncated = VirtualRegister("i1")
            current_node.add_instruction(Instruction("trunc", [val, "i1"], [truncated], val.content_type))
            current_node.conditional_register = truncated
            val = truncated
        else
            current_node.conditional_register = val
        end
        main_node = CFGNode ()
        main_node.sealed = true
        join_node = CFGNode ()
        join_node.sealed = true

        current_node.set_true_successor(main_node)

        # Set the successor before we call translate stmt so that it can be overriden
        main_node.set_successor(join_node)
        main_node_exit = main.translate_stmt (main_node, return_node)
        if main_node_exit != return_node
            main_node_exit.set_successor(join_node)
        end
        if has_else?
            # Set up the else node
            els_node = CFGNode ()
            els_node.sealed = true
            current_node.set_false_successor (els_node)

            els_node_exit = els.translate_stmt (els_node, return_node)
            if els_node.successor == {blz.nil} && els_node.true_successor == {blz.nil} && els_node.false_successor == {blz.nil}
                # Set the successor before we call translate stmt so that it can be overriden
                els_node.set_successor(join_node)
            end
            if els_node_exit != return_node
                els_node_exit.set_successor(join_node)
            end
            if main_node_exit == return_node && els_node_exit == return_node
                return return_node
            end
        else
            current_node.set_false_successor(join_node)
        end

        join_node
    end

end

:parse_if_node(json)
    cond = create_node!(json["guard"])
    main = create_node!(json["then"])
    if json.has_key?("else")
        els = create_node!(json["else"])
        IfNode!(cond, main, json["line"], els)
    else
        IfNode!(cond, main, json["line"])
    end
end