require ../types/primitive_type
require ../instructions/register
require ../instructions/instruction
require ../minilang_compiler

constructor LValue(id, line, left)
    statement? = false
    expression? = true
    terminal = (left == {blz.nil})

    :show
        if terminal
            id
        else
            id + "." + left
        end
    end
    
    :typecheck(symbol_table, struct_map)
        if terminal
            if symbol_table.symbols.keys().contains?(id)
                sym = symbol_table.symbols.get(id)
                this.symbol = sym
                this.symbol_type = sym.typ
                this.place = sym.where
                return sym.typ
            else
                print("Type error on line " + line + " could not find type for symbol " + id)
                primitive_type("error")
            end
        else
            left_type = left.typecheck(symbol_table, struct_map)
            this.left_type = left_type
            if left_type.get_field(id) != {blz.nil}
                this.right_type = left_type.get_field(id).typ
                this.right_offset = left_type.index_of_field(id)
                return this.right_type
            else
                print("Type error on line: " + line + " struct " + left_type.id + " did not contain field with id "+ id)
                return primitive_type("error")
            end
        end
    end

    :translate(current_block)
        if terminal
            if emitting_llvm?()
                if stack_based?() || this.place == "global"
                    load_register = VirtualRegister(this.symbol_type.show(), id, this.place)
                    result_register = VirtualRegister(this.symbol_type.show())
                    current_block.add_instruction(Instruction("Load", [load_register], [result_register], this.symbol_type))
                    result_register
                else
                    try
                        current_block.find_variable(id, this.symbol_type)
                    catch exception
                        throw exception + " on line " + line
                    end
                end
            else 
                try
                    current_block.find_variable(id, this.symbol_type)
                catch exception
                    throw exception + " on line " + line
                end
            end
        else
            offset = left_type.index_of_field(id)
            
            left_result = left.translate(current_block)
            address_of_val_in_struct = VirtualRegister(right_type + "*")
            
            # Figure out how to get the types from these
            current_block.add_instruction(Instruction("GetElement", [left_result, offset], [address_of_val_in_struct], left_type))
            result_register = VirtualRegister(right_type)
            current_block.add_instruction(Instruction("Load", [address_of_val_in_struct], [result_register], right_type))
            result_register
        end
    end

    :translate_right(current_block)
        if terminal
            # return a reference to the register that the variable should be in
            VirtualRegister(this.symbol_type+"*", id, this.place)
        else
            left_result = left.translate(current_block)
            result = VirtualRegister()
            current_block.add_instruction(Instruction("GetElement", [left_result, this.right_offset], [result], this.left_type))
            return result
        end
    end

end

:parse_lvalue(json)
    if json.has_key?("left")
        LValue(json["id"], json["line"], parse_lvalue(json["left"]))
    else
        LValue(json["id"], json["line"])
    end
end