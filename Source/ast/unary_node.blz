require ast_factory
require ../types/primitive_type
require ../instructions/instruction
require ../instructions/register

constructor UnaryNode(op, left, line)
    statement? = false
    expression? = true
    :show
        "<" + op + " " + left + ">"
    end

    :typecheck(symbol_table, struct_map)
        left_type = left.typecheck(symbol_table, struct_map)
        if op == "-"
            if left_type.can_not_become(primitive_type("int"))
                print("Type error on line " + line +": Unary minus expects an int, got " + left_type + " instead")
                return primitive_type("error")
            else
                return primitive_type("int")
            end
        else if op == "!"
            if left_type.can_not_become(primitive_type("bool"))
                print("Type error on line " + line +": Unary negation expects bool, got " + left_type + " instead")
                return primitive_type("error")
            else
                return primitive_type("bool")
            end
        end
    end

    :translate(current_block)
        left_translate = left.translate(current_block)
        if op == "-"
            if left_translate.type == "Integer"
                return -1 * left_translate
            else if left_translate.type == "VirtualRegister"
                result_register = VirtualRegister("i32")
                current_block.add_instruction(Instruction("NegateInteger", [left_translate], [result_register]))
                return result_register
            end
        else if op == "!"
            if left_translate.type == "Integer"
                if left_translate == 0
                    return 1
                else if left_translate == 1
                    return 0
                else
                    throw "Invalid bool representative " + left_translate
                end
            else if left_translate.type == "VirtualRegister"
                result_register = VirtualRegister("i32")
                current_block.add_instruction(Instruction("NegateBoolean", [left_translate], [result_register]))
                return result_register
            end
        end
    end

end

:parse_unary_node(json)
    left = create_node!(json["operand"])
    UnaryNode!(json["operator"], left, json["line"])
end