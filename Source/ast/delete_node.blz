require ast_factory
require ../types/primitive_type
require ../instructions/instruction
require ../instructions/register

constructor DeleteNode(expr, line)
    statement? = true
    expression? = false
    :show
        "delete " + expr
    end

    :typecheck(symbol_table, struct_map)
        typ = expr.typecheck(symbol_table, struct_map)
        this.typ = typ
        if typ.type != "StructType"
            print("Type error on line "+line+": Delete tried to delete non structure")
            return primitive_type("error")
        end
        typ
    end

    :translate_stmt(current_block, exit_block)
        translate(current_block)
        current_block
    end

    :translate(current_block)
        expr_register = expr.translate(current_block)
        bitcast_register = VirtualRegister("i8*")
        current_block.add_instruction(Instruction("bitcast", [expr_register, "i8*"], [bitcast_register], this.typ))
        current_block.add_instruction(Instruction("FunctionCall", ["free", "i8*", bitcast_register], [], "void"))
    end

end

:parse_delete_node(json)
    DeleteNode!(create_node!(json["exp"]), json["line"])
end