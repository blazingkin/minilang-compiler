require ast_factory
require ../types/primitive_type
require ../instructions/instruction
require ../instructions/register

constructor BinaryNode(operator, left, right, line)
    statement? = false
    expression? = true
    :show
        "<" + operator + " " + left + " " + right + ">"
    end

    :check_both_types(l, r, typ)
        if l.can_not_become(typ)
            print("Type error on line "+line+" left side of " + operator + " was not a(n) "+typ)
            return primitive_type("error")
        else if r.can_not_become(typ)
            print("Type error on line "+line+" right side of " + operator + " was not a(n) "+typ)
            return primitive_type("error")
        end
        return typ
    end

    :typecheck(symbol_table, struct_map)
        left_type = left.typecheck(symbol_table, struct_map)
        right_type = right.typecheck(symbol_table, struct_map)
        this.types = left_type
        if operator == "+" || operator == "*" || operator == "-" || operator == "/"
            return check_both_types(left_type, right_type, primitive_type("int"))
        else if operator == "||" || operator == "&&"
            return check_both_types(left_type, right_type, primitive_type("bool"))
        else if operator == "==" || operator == "!="
            if left_type.can_not_become(right_type)
                print("Type error on line "+line+" left side of comparison was " + left_type + " while right side was " + right_type)
                return primitive_type("error")
            else
                return primitive_type("bool")
            end
        else if operator == "<=" || operator == ">=" || operator == "<" || operator == ">"
            if left_type.can_not_become(primitive_type("int"))
                print("Type error on line "+line+" left side of " + operator + " was not an int")
                return primitive_type("error")
            else if right_type.can_not_become(primitive_type("int"))
                print("Type error on line "+line+" right side of " + operator + " was not an int")
                return primitive_type("error")
            else
                return primitive_type("bool")
            end
        end 

    end

    binary_op_to_instruction_op = {}
    binary_op_to_instruction_op["+"] = "add"
    binary_op_to_instruction_op["-"] = "sub"
    binary_op_to_instruction_op["*"] = "mul"
    binary_op_to_instruction_op["/"] = "sdiv"
    binary_op_to_instruction_op["||"] = "or"
    binary_op_to_instruction_op["&&"] = "and"
    binary_op_to_instruction_op["=="] = "eq"
    binary_op_to_instruction_op["<="] = "sle"
    binary_op_to_instruction_op[">="] = "sge"
    binary_op_to_instruction_op["!="] = "ne"
    binary_op_to_instruction_op["<"] = "slt"
    binary_op_to_instruction_op[">"] = "sgt"

    binary_op_to_instruction_short = {}
    binary_op_to_instruction_short["+"] = (x, y -> x + y)
    binary_op_to_instruction_short["-"] = (x, y -> x - y)
    binary_op_to_instruction_short["*"] = (x, y -> x * y)

    # WARNING. THIS CURRENTLY RETURNS A FLOAT. NEED TO FIX SO THAT IT RETURNS AN INT
    binary_op_to_instruction_short["/"] = (x, y -> (x / y).floor())
    binary_op_to_instruction_short["||"] = (x, y -> x ^ y)
    binary_op_to_instruction_short["&&"] = (x, y -> x & y)
    binary_op_to_instruction_short["=="] = (x, y -> x == y)
    binary_op_to_instruction_short["<="] = (x, y -> x <= y)
    binary_op_to_instruction_short[">="] = (x, y -> x >= y)
    binary_op_to_instruction_short["!="] = (x, y -> x != y)
    binary_op_to_instruction_short["<"] = (x, y -> x < y)
    binary_op_to_instruction_short[">"] = (x, y -> x > y)

    :translate(current_block)
        t_left = left.translate(current_block)
        t_right = right.translate(current_block)

        if t_left.type == "VirtualRegister" && t_left.content_type == "i1"
            extended = VirtualRegister("i32")
            current_block.add_instruction(Instruction("zext", [t_left, "i32"], [extended], "i1"))
            t_left = extended
        end
        if t_right.type == "VirtualRegister" && t_right.content_type == "i1"
            extended = VirtualRegister("i32")
            current_block.add_instruction(Instruction("zext", [t_right, "i32"], [extended], "i1"))
            t_right = extended
        end
        if operator == "!=" || operator == "==" || operator == "<=" || operator == ">=" || operator == "<" || operator == ">"
            result_register = VirtualRegister("i1")
            current_block.add_instruction(Instruction("Comparison", [binary_op_to_instruction_op[operator], t_left, t_right], [result_register], this.types))
        else
            result_register = VirtualRegister("i32")
            current_block.add_instruction(Instruction(binary_op_to_instruction_op[operator], [t_left, t_right], [result_register], "i32"))
        end
        return result_register
    end

end

:parse_binary_node(json)
    lft = create_node!(json["lft"])
    right = create_node!(json["rht"])
    BinaryNode!(json["operator"], lft, right, json["line"])
end