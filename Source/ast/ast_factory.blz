require ../syntax_exception
require return_node
require number_node
require binary_node
require identifier_node
require assign_node
require if_node
require block_node
require invocation_node
require unary_node
require read_node
require while_node
require print_node
require dot_node
require alloc_node
require delete_node
require bool_node
require null_node

:create_node(json)
    if json.has_key?("stmt")
        type = json["stmt"]
    else if json.has_key?("exp")
        type = json["exp"]
    else
        throw SyntaxException("Invalid node " + json)
    end

    if type == "binary"
        parse_binary_node!(json)
    else if type == "id"
        parse_identifier_node!(json)
    else if type == "if"
        parse_if_node!(json)
    else if type == "invocation"
        parse_invocation_node!(json)
    else if type == "assign"
        parse_assign_node!(json)
    else if type == "num"
        parse_number_node!(json)
    else if type == "return"
        parse_return_node!(json)
    else if type == "unary"
        parse_unary_node!(json)
    else if type == "null"
        parse_null_node!(json)
    else if type == "block"
        parse_block_node!(json["list"])
    else if type == "dot"
        parse_dot_node!(json)
    else if type == "read"
        parse_read_node!(json)
    else if type == "while"
        parse_while_node!(json)
    else if type == "new"
        parse_alloc_node!(json)
    else if type == "delete"
        parse_delete_node!(json)
    else if type == "print"
        parse_print_node!(json)
    else if type == "true"
        parse_bool_node(json, true)
    else if type == "false"
        parse_bool_node(json, false)
    else
        print(json)
        throw SyntaxException("Unknown type " + type)
    end
end