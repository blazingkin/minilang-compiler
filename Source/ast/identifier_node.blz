require ast_factory
require ../types/primitive_type
require ../instructions/register
require ../instructions/instruction
require ../minilang_compiler

constructor IdentifierNode(id, line)
    statement? = false
    expression? = true

    :copy
        this
    end

    :show
        id
    end

    :typecheck (symbol_table, struct_map)
        if symbol_table.symbols.keys().contains?(id)
            declaration = symbol_table.symbols.get(id)
            this.place = declaration.where
            # Save the type and implicitly return it
            this.typ = declaration.typ
        else
            print("Identifier "+id+" not bound to a type")
            primitive_type("error")
        end
    end

    :translate(current_block)
        if emitting_llvm?()
            if stack_based?() || this.place == "global"
                load_register = VirtualRegister(this.typ.show(), id, this.place)
                result_register = VirtualRegister(this.typ.show())
                current_block.add_instruction(Instruction("Load", [load_register], [result_register], this.typ))
                result_register
            else
                try
                    current_block.find_variable(id, this.typ)
                catch exception
                    throw exception + " on line " + line
                end
            end
        else 
            throw "Not yet implemented"
        end
    end

end

:parse_identifier_node(json)
    IdentifierNode!(json["id"], json["line"])
end