require ast_factory
require ../types/primitive_type
require ../cfg/cfg_node
require ../instructions/instruction
require ../instructions/register

constructor WhileNode(guard, block, line)
    statement? = true
    expression? = false
    :show
        "<While " + guard + " then " + block + ">"
    end

    :typecheck (symbol_table, struct_map)
        guard_type = guard.typecheck(symbol_table, struct_map)
        block_type = block.typecheck(symbol_table, struct_map)

        if guard_type.can_not_become (primitive_type ("bool"))
            print ("Type error on line: " + line + " Expected boolean expression as a conditional but found a(n) " + guard_type + " instead.")
            return primitive_type ("error")
        end
    end

    :translate_stmt(current_node, exit_node)
        condition_node = CFGNode()
        # Add guard instruction to condition_node
        result = guard.translate(condition_node)

        if result.type == "VirtualRegister" && result.content_type != "i1"
            truncated = VirtualRegister("i1")
            condition_node.add_instruction(Instruction("trunc", [result, "i1"], [truncated], result.content_type))
            condition_node.conditional_register = truncated
            result = truncated
        else
            condition_node.conditional_register = result
        end
        # Link the current node to the condition
        current_node.set_successor(condition_node)
        block_node = CFGNode()
        block_node.sealed = true
        condition_node.set_true_successor(block_node)
        continuation_node = CFGNode()
        continuation_node.sealed = true
        condition_node.set_false_successor(continuation_node)

        block_exit_node = block.translate_stmt(block_node, exit_node)
        if block_exit_node != exit_node
            block_exit_node.set_successor(condition_node)
        end
        try
            condition_node.seal()
        catch e
            pr = condition_node.predecessors + ""
            print(condition_node.incomplete_phis)
            throw pr
        end
        continuation_node
    end

end

:parse_while_node(json)
    WhileNode!(create_node!(json["guard"]), create_node!(json["body"]), json["line"])
end