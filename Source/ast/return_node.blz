require ast_factory
require ../types/primitive_type
require ../instructions/instruction


constructor ReturnNode(line, expression)
    statement? = true
    expression? = false
    void_return? = (expression == {blz.nil})

    return_type = {blz.nil}

    :show
        if void_return?
            "<Return>"
        else
            "<Return " + expression + ">"
        end
    end

    :typecheck(symbol_table, struct_map)
        if void_return?
            exp_type = primitive_type("void")
        else
            exp_type = expression.typecheck(symbol_table, struct_map)
        end
        if exp_type.can_not_become(symbol_table.function_type.output)
            print("Type error on line: " + line + " Expected function to return type " + symbol_table.function_type.output + " but returned "+exp_type)
            return primitive_type("error")
        end
        return_type = exp_type
        exp_type
    end

    :translate_stmt(current_block, exit_block)
        # generate return code
        if void_return?
            current_block.add_instruction(Instruction("Return", [], [], {blz.nil}))
        else
            t_return = expression.translate(current_block)
            current_block.add_instruction(Instruction("Return", [t_return], [], return_type.show()))
        end
        current_block.set_successor(exit_block)
        exit_block
    end

end

:parse_return_node(json)
    if json.has_key?("exp")
        ReturnNode!(json["line"], create_node!(json["exp"]))
    else
        ReturnNode!(json["line"])
    end
end
