require ast_factory
require ../types/primitive_type

constructor ReturnNode(line, expression)

    void_return? = (expression == {blz.nil})

    :show
        if void_return?
            "<Return>"
        else
            "<Return " + expression + ">"
        end
    end

    :typecheck(symbol_table, struct_map)
        exp_type = expression.typecheck(symbol_table, struct_map)
        if exp_type.can_not_become(symbol_table.function_type.output)
            print("Type error on line: " + line + " Expected function to return type " + symbol_table.function_type.output + " but returned "+exp_type)
            return primitive_type("error")
        end
        exp_type
    end

end

:parse_return_node(json)
    if json.has_key?("exp")
        ReturnNode!(json["line"], create_node!(json["exp"]))
    else
        ReturnNode!(json["line"])
    end
end