require ast_factory
require ../types/primitive_type
require ../instructions/register
require ../instructions/instruction

constructor DotNode(left, id, line)
    statement? = false
    expression? = true
    :show
        left + "." + id
    end

    :copy
        this
    end

    :typecheck (symbol_table, struct_map)
        left_type = left.typecheck(symbol_table, struct_map)
        this.left_type = left_type
        if left_type.type != "StructType"
            print ("Type error on line: " + line + " Expected a struct to the left but found a(n) " + left_type + " instead.")
            return primitive_type ("error")
        end

        if left_type.get_field(id) != {blz.nil}
            this.right_type = left_type.get_field(id).typ
            return this.right_type
        else
            print("Type error on line: " + line + " struct " + left_type.id + " did not contain field with id "+ id)
            return primitive_type("error")
        end
    end

    :translate(current_block)
        offset = left_type.index_of_field(id)

        left_result = left.translate(current_block)
        address_of_val_in_struct = VirtualRegister(this.right_type + "*")
        
        # Figure out how to get the types from these
        current_block.add_instruction(Instruction("GetElement", [left_result, offset], [address_of_val_in_struct], this.right_type))
        result_register = VirtualRegister(this.right_type)
        current_block.add_instruction(Instruction("Load", [address_of_val_in_struct], [result_register], this.right_type))
        return result_register
    end

end

:parse_dot_node(json)
    DotNode!(create_node!(json["left"]), json["id"], json["line"])
end