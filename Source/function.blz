require ast/block_node
require declaration
require types/function_type
require types/type_factory
require types/type_error
require tables/symbol_table

constructor Function(line, id, return_type, body, parameters, declarations)

    :show
        "<Function " + id + " " + line + " " + typ + "\n\t" + parameters + " " + declarations  + "\n\t" + body  + ">"
    end

    input_types = parameters.map(x -> x.typ)
    typ = FunctionType(input_types, return_type)

    :typecheck(id_map, struct_map)
        # bind local variables in the id_map
        for i = 0; i < parameters.length!(); i++
            id_map[parameters[i].id] = parameters[i].typ
        end
        for i = 0; i < declarations.length!(); i++
            id_map[declarations[i].id] = declarations[i].typ
        end
        symbol_table = SymbolTable!(id_map, typ)
        result = body.typecheck(symbol_table, struct_map)
    end

end

:parse_function(json)
    line = json["line"]
    id = json["id"]
    return_type = parse_type(json["return_type"])
    body = parse_block_node(json["body"])
    parameters = json["parameters"].map!(parse_declaration)
    declarations = json["declarations"].map!(parse_declaration)
    Function!(line, id, return_type, body, parameters, declarations)
end